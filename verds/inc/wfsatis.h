int SATapply(model *mm);
int bin_init(int nn,int *ll);;
int bin_close(int nn);;
int bin_update(int x,int y,int c);;
int bin_new(int nn);;
int bin_backtrack(int nn);;
int *bin_use1(int c);;
int *bin_use2(int c);;
void bin_sum_init(int nn,char *gim,int *out);;
void bin_sum(int nn,char *gim,int *in,int *out,int k);;
int bin_init(int nn,int *ll);
int bin_close(int nn);
int bin_new(int nn);
int bin_backtrack(int nn);
int bin_update(int x,int y,int c);
int bin_update_local(int x,int y,int c);
int *bin_use(int c);
int *bin_use2(int c);
void bin_sum_init(int nn,char *gim,int *out);
void bin_sum(int nn,char *gim,int *in,int *out,int k);
int issat1(model *mm);
int startbranching(mstruct *cc,mdata *wc,int n,int m,int *ccCL);
int branching(mstruct *cc,mdata *wc,int *cl,int n,int m);
void backtrack(mdata *wc,int *lcl,int *cur);
int select_v_a(mstruct *cc,int *cl,char *gim,int n);
int select_v_b(mstruct *cc,int *cl,mdata *wc,int n);
int select_v(mstruct *cc,int *cl,char *gim,int n);
int issat(model *mm);
int select_v_c(mstruct *cc,int *cl,mdata *wc,int n);
mstruct *model2mstruct(model *mm);
mdata *create_mdata(model *mm);
void freemdata(mstruct *cc,mdata *wc,int n);
int modelcleaneq(model *mm,mstruct *cc,mdata *mc,int *cl);
int *modelsimplifybin(model *mm,mstruct *cc,mdata *mc,int *cl);
int fnd2b2(int i,int a,int b,mstruct *cc,int *cl);
int fnd2b(int i,int a,int b,mstruct *cc,int *cl,int *nFnd);
void replaceclause(int i,int c,mstruct *cc);
void writelog(char *s,int *y);
int intinneg(int a,int *bb);
int intsetincludeneg(int *aa,int *bb);
int intinnegremove(int a,int *bb);
int intinpos(int a,int *bb);
int imp_res_simple(int *aa,int *bb);
int imp_init(int nn);;
int imp_close(int nn);;
int imp_update(int x,int i);;
int imp_backtrack(int *cur);;
int imp_use(mstruct *cc,mdata *wc);;
extern int STAT_branch;;
extern int STAT_depth;;
extern int STAT_learned;;
int imp_init(int nn);
int imp_close(int nn);
int imp_update(int x,int i);
int imp_backtrack(int *cur);
int imp_res_local(int *p1,int c1,int *p2,int c2,int p,int x);
int imp_res(int x,int m,mstruct *cc,mdata *wc);
int imp_getvar(int *aa,int aac);
int imp_use(mstruct *cc,mdata *wc);
int intlevel(int *aa,int *literals,int dep);
model *file2model(char *fn);
void CNFread_numbers(char *ll,model *mm);
void CNFread_clauses(char *ll,model *mm);
int *initorder(mstruct *cc,int *cl,char *gim,int n);
float lvalue(mstruct *cc,int *cl,int literal);
int b1search(int v,int *b,int n);
int b2search(char *gim,int *b,int n);
int lvalue_b(mstruct *cc,int *cl,int literal);
int ispart(mstruct *cc,int m,int n);
int reorder(float *ff,int *io,int m,int n);
int lvalue_c(mstruct *cc,int *cl,int literal);
int eqcycle(int *a,int *b);
void modelcompresseq(model *mm,mstruct *cc,mdata *wc,int *cl,int *n1,int *n2);
void modelcompress(model *mm,mstruct *cc,mdata *wc,int *cl);
void CNFmodelclean(model *mm);
char *file2string(char *fn);
int *unitclauses(mstruct *cc,mdata *wc,int *cl,int m,int *unit);
int unitp(mstruct *cc,mdata *wc,int *cl,int *cur);
int unitp1(mstruct *cc,mdata *wc,int *cl,int *cur);
void cnfstringwrite(int *mstring,int mstringc,FILE *g);
void cnfmodelwrite(model *mo,FILE *g);
void cnfmstructwrite(model *mo,mstruct *cc,char *lcl,int k,FILE *g);
void cnfmodelappendwrite(model *mo,int *literals,FILE *g);
